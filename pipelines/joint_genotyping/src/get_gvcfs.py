from collections import defaultdict
import os
from minio import Minio

# get dog ids 
d = defaultdict(list)
with open(config["joint_cohort"]) as f:
    ids = [d[line.rstrip()] for line in f]


if not os.path.isfile("gvcfs.list"):
    # setup minio client
    s3_key_id = os.environ.get("AWS_ACCESS_KEY")
    s3_access_key = os.environ.get("AWS_SECRET_KEY")

    if s3_key_id is None or s3_access_key is None:
        print('No access key is available.')
        # sys.exit()

    # initialize minioClient with an endpoint and access/secret keys.
    s3Client = Minio(
        "s3.msi.umn.edu",
        access_key=s3_key_id,
        secret_key=s3_access_key,
        secure=True,
    )

    # list all object paths in bucket that begin with my-prefixname.
    objects = list(
        s3Client.list_objects("friedlab",
        prefix="wgs/",
        recursive=True)
    )

    # get breed per dog id - skip first element which the bucket and prefix
    # (objects generated by src/get_objects.py)
    for i in objects[1:]:
        i = os.path.join(config["alias"],i.bucket_name,i.object_name)
        breed,sample = i.split("/")[3:5]
        if (sample in d) and (i.endswith(".g.vcf.gz")) and (config['ref'] in i):
            d[sample].extend([breed,i])

    with open("gvcfs.list","w") as f:
        f.write("sample\tbreed\tgvcf\n")
        for k,v in d.items():
            f.write(f"{k}\t{v[0]}\t{v[1]}\n")

